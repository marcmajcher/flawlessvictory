#!/usr/bin/env node

'use strict';

/* eslint-env node */

const app = require('./app');
const debug = require('debug')('flawless:server');
const http = require('http');

function normalizePort(val) {
  const port = parseInt(val, 10);
  if (isNaN(port)) {
    return val;
  }

  if (port >= 0) {
    return port;
  }
  return false;
}

const port = '29277';
app.set('port', port);
const server = http.createServer(app);

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string' ?
    `Pipe ${port}` : `Port ${port}`;

  // handle specific listen errors with friendly messages
  switch (error.code) {
  case 'EACCES':
    console.error(`${bind} requires elevated privileges`); // eslint-disable-line no-console
    process.exit(1);
    break;
  case 'EADDRINUSE':
    console.error(`${bind} is already in use`); // eslint-disable-line no-console
    process.exit(1);
    break;
  default:
    throw error;
  }
}

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string' ?
    `pipe ${addr}` :
    `port ${addr.port}`;
  debug(`Listening on ${bind}`);
}

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);
